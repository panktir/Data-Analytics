-- Creating Customers table
CREATE TABLE Customers (
CustomerID INT NOT NULL PRIMARY KEY,
FirstName VARCHAR(50) NOT NULL,
LastName VARCHAR(50) NOT NULL,
Email VARCHAR(50) UNIQUE NOT NULL,
Password VARCHAR(50) NOT NULL,
Address VARCHAR(50) NOT NULL,
City VARCHAR(50) NOT NULL,
State VARCHAR(50) NOT NULL,
ZipCode VARCHAR(10) NOT NULL,
Country VARCHAR(50) NOT NULL
);

-- Creating Books table
CREATE TABLE Books (
BookID INT NOT NULL PRIMARY KEY,
Title VARCHAR(100) NOT NULL,
Author VARCHAR(100) NOT NULL,
Publisher VARCHAR(100) NOT NULL,
PublicationDate DATE NOT NULL,
Price DECIMAL(10, 2) NOT NULL,
ISBN VARCHAR(50) NOT NULL,
Description VARCHAR(1000) NOT NULL
);

-- Creating Orders table
CREATE TABLE Orders (
OrderID INT NOT NULL PRIMARY KEY,
CustomerID INT NOT NULL,
OrderDate DATE NOT NULL,
TotalAmount DECIMAL(10, 2) NOT NULL,
PaymentMethod VARCHAR(50) NOT NULL,
ShippingAddress VARCHAR(100) NOT NULL,
ShippingCity VARCHAR(50) NOT NULL,
ShippingState VARCHAR(50) NOT NULL,
ShippingZipCode VARCHAR(10) NOT NULL,
ShippingCountry VARCHAR(50) NOT NULL,
CONSTRAINT fk_customers
FOREIGN KEY (CustomerID)
REFERENCES Customers(CustomerID)
);

-- Creating Order Details table
CREATE TABLE OrderDetails (
OrderDetailID INT NOT NULL PRIMARY KEY,
OrderID INT NOT NULL,
BookID INT NOT NULL,
Quantity INT NOT NULL,
UnitPrice DECIMAL(10, 2) NOT NULL,
CONSTRAINT fk_orders
FOREIGN KEY (OrderID)
REFERENCES Orders(OrderID),
CONSTRAINT fk_books
FOREIGN KEY (BookID)
REFERENCES Books(BookID)
);

-- Creating Reviews table
CREATE TABLE Reviews (
ReviewID INT NOT NULL PRIMARY KEY,
BookID INT NOT NULL,
CustomerID INT NOT NULL,
Rating INT NOT NULL,
Comment VARCHAR(1000),
CONSTRAINT fk_books
FOREIGN KEY (BookID)
REFERENCES Books(BookID),
CONSTRAINT fk_customers
FOREIGN KEY (CustomerID)
REFERENCES Customers(CustomerID)
);

-- Query to insert a new customer
INSERT INTO Customers (CustomerID, FirstName, LastName, Email, Password, Address, City, State, ZipCode, Country)
VALUES (1, 'John', 'Doe', 'johndoe@example.com', 'password', '123 Main St', 'Anytown', 'CA', '12345', 'USA');

-- Query to insert a new book
INSERT INTO Books (BookID, Title, Author, Publisher, PublicationDate, Price, ISBN, Description)
VALUES (1, 'The Great Gatsby', 'F. Scott Fitzgerald', 'Scribner', '1925-04-10', 12.99, '978-0743273565', 'The story primarily concerns the young and mysterious millionaire Jay Gatsby...');

-- Query to place a new order
INSERT INTO Orders (OrderID, CustomerID, OrderDate, TotalAmount, PaymentMethod, ShippingAddress, ShippingCity, Shipping

--Query to retrieve the top 5 bestselling books by total order quantity
SELECT Books.Title, SUM(OrderDetails.Quantity) AS TotalQuantity
FROM Books
JOIN OrderDetails ON Books.BookID = OrderDetails.BookID
GROUP BY Books.Title
ORDER BY TotalQuantity DESC
LIMIT 5;

--Query to retrieve the average rating for each book
SELECT Books.Title, AVG(Reviews.Rating) AS AvgRating
FROM Books
LEFT JOIN Reviews ON Books.BookID = Reviews.BookID
GROUP BY Books.Title;

--Query to retrieve the total revenue generated by each author
SELECT Books.Author, SUM(OrderDetails.Quantity * OrderDetails.UnitPrice) AS TotalRevenue
FROM Books
JOIN OrderDetails ON Books.BookID = OrderDetails.BookID
GROUP BY Books.Author;

--Query to retrieve the top 5 customers with the highest total order amount
SELECT Customers.FirstName, Customers.LastName, SUM(Orders.TotalAmount) AS TotalOrderAmount
FROM Customers
JOIN Orders ON Customers.CustomerID = Orders.CustomerID
GROUP BY Customers.FirstName, Customers.LastName
ORDER BY TotalOrderAmount DESC
LIMIT 5;

--Query to retrieve the number of reviews and the average rating for each book, along with the author's name
SELECT Books.Title, Books.Author, COUNT(Reviews.ReviewID) AS NumReviews, AVG(Reviews.Rating) AS AvgRating
FROM Books
LEFT JOIN Reviews ON Books.BookID = Reviews.BookID
GROUP BY Books.Title, Books.Author;

--Query to retrieve the top 10 customers who have reviewed the most number of books
SELECT Customers.FirstName, Customers.LastName, COUNT(DISTINCT Reviews.BookID) AS NumReviews
FROM Customers
JOIN Reviews ON Customers.CustomerID = Reviews.CustomerID
GROUP BY Customers.FirstName, Customers.LastName
ORDER BY NumReviews DESC
LIMIT 10;
